{"ast":null,"code":"const jStat = require('jStat').jStat;\n\nexport const generateTangle = ({\n  nodeCount,\n  lambda = 1.5,\n  h = 1,\n  alpha = 0.5,\n  tipSelectionAlgorithm\n}) => {\n  jStat.exponential.sample(lambda);\n  const genesis = {\n    name: '0',\n    time: 0\n  };\n  let nodes = [genesis];\n  let time = h;\n\n  while (nodes.length < nodeCount) {\n    const delay = jStat.exponential.sample(lambda);\n    time += delay;\n    nodes.push({\n      name: `${nodes.length}`,\n      time,\n      x: 300,\n      y: 200\n    });\n  }\n\n  const links = [];\n\n  for (let node of nodes) {\n    const candidates = nodes.filter(candidate => candidate.time < node.time - h);\n    const candidateLinks = links.filter(link => link.source.time < node.time - h);\n    const tips = tipSelectionAlgorithm({\n      nodes: candidates,\n      links: candidateLinks,\n      alpha\n    });\n\n    if (tips.length > 0) {\n      links.push({\n        source: node,\n        target: tips[0]\n      });\n\n      if (tips.length > 1 && tips[0].name !== tips[1].name) {\n        links.push({\n          source: node,\n          target: tips[1]\n        });\n      }\n    }\n  }\n\n  ;\n  return {\n    nodes,\n    links\n  };\n};","map":{"version":3,"sources":["/home/crawlins/IdeaProjects/IOTAVis/reactClient/src/shared/generateData.js"],"names":["jStat","require","generateTangle","nodeCount","lambda","h","alpha","tipSelectionAlgorithm","exponential","sample","genesis","name","time","nodes","length","delay","push","x","y","links","node","candidates","filter","candidate","candidateLinks","link","source","tips","target"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBD,KAA/B;;AAEA,OAAO,MAAME,cAAc,GAAG,CAAC;AAACC,EAAAA,SAAD;AAAYC,EAAAA,MAAM,GAAG,GAArB;AAA0BC,EAAAA,CAAC,GAAC,CAA5B;AAA+BC,EAAAA,KAAK,GAAC,GAArC;AAA0CC,EAAAA;AAA1C,CAAD,KAAsE;AAClGP,EAAAA,KAAK,CAACQ,WAAN,CAAkBC,MAAlB,CAAyBL,MAAzB;AACA,QAAMM,OAAO,GAAG;AACdC,IAAAA,IAAI,EAAE,GADQ;AAEdC,IAAAA,IAAI,EAAE;AAFQ,GAAhB;AAKA,MAAIC,KAAK,GAAG,CAACH,OAAD,CAAZ;AACA,MAAIE,IAAI,GAAGP,CAAX;;AACA,SAAOQ,KAAK,CAACC,MAAN,GAAeX,SAAtB,EAAiC;AAC/B,UAAMY,KAAK,GAAGf,KAAK,CAACQ,WAAN,CAAkBC,MAAlB,CAAyBL,MAAzB,CAAd;AACAQ,IAAAA,IAAI,IAAIG,KAAR;AACAF,IAAAA,KAAK,CAACG,IAAN,CAAW;AACTL,MAAAA,IAAI,EAAG,GAAEE,KAAK,CAACC,MAAO,EADb;AAETF,MAAAA,IAFS;AAGTK,MAAAA,CAAC,EAAE,GAHM;AAITC,MAAAA,CAAC,EAAE;AAJM,KAAX;AAMD;;AAED,QAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,IAAT,IAAiBP,KAAjB,EAAwB;AACtB,UAAMQ,UAAU,GAAGR,KAAK,CACrBS,MADgB,CACTC,SAAS,IAAIA,SAAS,CAACX,IAAV,GAAiBQ,IAAI,CAACR,IAAL,GAAYP,CADjC,CAAnB;AAGA,UAAMmB,cAAc,GAAGL,KAAK,CACzBG,MADoB,CACbG,IAAI,IAAIA,IAAI,CAACC,MAAL,CAAYd,IAAZ,GAAmBQ,IAAI,CAACR,IAAL,GAAYP,CAD1B,CAAvB;AAGA,UAAMsB,IAAI,GAAGpB,qBAAqB,CAAC;AACjCM,MAAAA,KAAK,EAAEQ,UAD0B;AAEjCF,MAAAA,KAAK,EAAEK,cAF0B;AAGjClB,MAAAA;AAHiC,KAAD,CAAlC;;AAMA,QAAIqB,IAAI,CAACb,MAAL,GAAc,CAAlB,EAAqB;AACnBK,MAAAA,KAAK,CAACH,IAAN,CAAW;AAACU,QAAAA,MAAM,EAAEN,IAAT;AAAeQ,QAAAA,MAAM,EAAED,IAAI,CAAC,CAAD;AAA3B,OAAX;;AACA,UAAIA,IAAI,CAACb,MAAL,GAAc,CAAd,IAAmBa,IAAI,CAAC,CAAD,CAAJ,CAAQhB,IAAR,KAAiBgB,IAAI,CAAC,CAAD,CAAJ,CAAQhB,IAAhD,EAAsD;AACpDQ,QAAAA,KAAK,CAACH,IAAN,CAAW;AAACU,UAAAA,MAAM,EAAEN,IAAT;AAAeQ,UAAAA,MAAM,EAAED,IAAI,CAAC,CAAD;AAA3B,SAAX;AACD;AACF;AACF;;AAAA;AAED,SAAO;AACLd,IAAAA,KADK;AAELM,IAAAA;AAFK,GAAP;AAID,CA9CM","sourcesContent":["const jStat = require('jStat').jStat;\n\nexport const generateTangle = ({nodeCount, lambda = 1.5, h=1, alpha=0.5, tipSelectionAlgorithm}) => {\n  jStat.exponential.sample(lambda);\n  const genesis = {\n    name: '0',\n    time: 0,\n  };\n\n  let nodes = [genesis];\n  let time = h;\n  while (nodes.length < nodeCount) {\n    const delay = jStat.exponential.sample(lambda);\n    time += delay;\n    nodes.push({\n      name: `${nodes.length}`,\n      time,\n      x: 300,\n      y: 200,\n    });\n  }\n\n  const links = [];\n  for (let node of nodes) {\n    const candidates = nodes\n      .filter(candidate => candidate.time < node.time - h);\n\n    const candidateLinks = links\n      .filter(link => link.source.time < node.time - h);\n\n    const tips = tipSelectionAlgorithm({\n      nodes: candidates,\n      links: candidateLinks,\n      alpha,\n    });\n\n    if (tips.length > 0) {\n      links.push({source: node, target: tips[0]});\n      if (tips.length > 1 && tips[0].name !== tips[1].name) {\n        links.push({source: node, target: tips[1]});\n      }\n    }\n  };\n\n  return {\n    nodes,\n    links,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}