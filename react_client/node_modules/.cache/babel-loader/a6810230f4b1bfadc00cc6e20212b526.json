{"ast":null,"code":"var _jsxFileName = \"/home/crawlins/IdeaProjects/IOTAVis/reactClient/src/containers/TangleContainer.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Tangle from '../components/Tangle';\nimport { connect } from 'react-redux';\nimport * as d3Force from 'd3-force';\nimport { scaleLinear } from 'd3-scale';\nimport { generateTangle } from '../shared/generateData';\nimport Slider from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-slider/assets/index.css';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport { getAncestors, getDescendants, getTips } from '../shared/algorithms';\nimport './radio-button.css';\nimport { uniformRandom, unWeightedMCMC, weightedMCMC, adaptiveML } from '../shared/tip-selection';\nimport '../components/Tangle.css';\nimport SliderContainer from './SliderContainer';\nimport seedrandom from 'seedrandom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar myrng = new seedrandom('hello.');\n\nvar request = require('sync-request');\n\nconst mapStateToProps = (state, ownProps) => ({});\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({});\n\nconst nodeRadiusMax = 25;\nconst nodeRadiusMin = 13;\nconst showLabelsMinimumRadius = 21;\n\nconst getNodeRadius = nodeCount => {\n  const smallNodeCount = 20;\n  const largeNodeCount = 100;\n\n  if (nodeCount < smallNodeCount) {\n    return nodeRadiusMax;\n  }\n\n  if (nodeCount > largeNodeCount) {\n    return nodeRadiusMin;\n  }\n\n  const scale = scaleLinear().domain([smallNodeCount, largeNodeCount]);\n  scale.range([nodeRadiusMax, nodeRadiusMin]);\n  return scale(nodeCount);\n};\n\nconst tipSelectionDictionary = {\n  'URTS': {\n    algo: uniformRandom,\n    label: 'Uniform Random'\n  },\n  'UWRW': {\n    algo: unWeightedMCMC,\n    label: 'Unweighted Random Walk'\n  },\n  'WRW': {\n    algo: weightedMCMC,\n    label: 'Weighted Random Walk'\n  },\n  'EIOTA': {\n    algo: '',\n    // Algo in Python server\n    label: 'E-IOTA (Best Param.)'\n  },\n  'AML': {\n    algo: adaptiveML,\n    label: 'Adaptive Machine Learning (WIP)'\n  },\n  'almostURTS': {\n    algo: '',\n    // Algo in Python server\n    label: 'Almost URTS'\n  } // TODO E-IOTA and others\n\n};\nconst leftMargin = 10;\nconst rightMargin = 10;\nconst bottomMargin = 190;\nconst nodeCountMin = 1;\nconst nodeCountMax = 500;\nconst nodeCountDefault = 100;\nconst lambdaMin = 0.1;\nconst lambdaMax = 50;\nconst lambdaDefault = 10;\nconst alphaMin = 0;\nconst alphaMax = 5;\nconst alphaDefault = 0.5;\nconst Handle = Slider.Handle;\n\nconst sliderHandle = props => {\n  const {\n    value,\n    dragging,\n    index,\n    ...restProps\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Tooltip, {\n    prefixCls: \"rc-slider-tooltip\",\n    overlay: value,\n    visible: dragging,\n    placement: \"top\",\n    children: /*#__PURE__*/_jsxDEV(Handle, {\n      value: value,\n      ...restProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\nsliderHandle.propTypes = {\n  value: PropTypes.number.isRequired,\n  dragging: PropTypes.bool.isRequired,\n  index: PropTypes.number.isRequired\n};\n\nconst TipAlgorithmLabel = ({\n  selectedAlgorithm,\n  onChange,\n  algoKey\n}) => /*#__PURE__*/_jsxDEV(\"label\", {\n  className: \"container\",\n  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      fontSize: 10\n    },\n    children: tipSelectionDictionary[algoKey].label\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"radio\",\n    name: \"radio\",\n    value: algoKey,\n    checked: selectedAlgorithm === algoKey,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"checkmark\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this)]\n}, algoKey, true, {\n  fileName: _jsxFileName,\n  lineNumber: 110,\n  columnNumber: 3\n}, this);\n\n_c = TipAlgorithmLabel;\nTipAlgorithmLabel.propTypes = {\n  selectedAlgorithm: PropTypes.string.isRequired,\n  onChange: PropTypes.any,\n  algoKey: PropTypes.string.isRequired\n};\n\nfunction cleanupData(tangleData) {\n  for (let node of tangleData.nodes) {\n    for (let link of tangleData.links) {\n      if (link.target.name == node.name) {\n        link.target = node;\n      }\n\n      if (link.source.name == node.name) {\n        link.source = node;\n      }\n    }\n  }\n\n  return tangleData;\n}\n\nclass TangleContainer extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      nodes: [],\n      links: [],\n      nodeCount: nodeCountDefault,\n      lambda: lambdaDefault,\n      alpha: alphaDefault,\n      width: 300,\n      // default values\n      height: 300,\n      nodeRadius: getNodeRadius(nodeCountDefault),\n      tipSelectionAlgorithm: 'URTS'\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.force = d3Force.forceSimulation();\n    this.force.alphaDecay(0.1);\n    this.force.on('tick', () => {\n      this.force.nodes(this.state.nodes); // restrict nodes to window area\n\n      for (let node of this.state.nodes) {\n        // Fixed transactions in time label with 5*\n        node.y = Math.max(this.state.nodeRadius, Math.min(this.state.height - 5 * this.state.nodeRadius, node.y));\n      }\n\n      this.setState({\n        links: this.state.links,\n        nodes: this.state.nodes\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.force.stop();\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentDidMount() {\n    this.startNewTangle();\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth - leftMargin - rightMargin,\n      height: window.innerWidth < 768 ? window.innerHeight : window.innerHeight - bottomMargin\n    }, () => {\n      this.recalculateFixedPositions();\n      this.force.force('no_collision', d3Force.forceCollide().radius(this.state.nodeRadius * 2).strength(0.01).iterations(15)).force('pin_y_to_center', d3Force.forceY().y(d => this.state.height / 2).strength(0.1)).force('pin_x_to_time', d3Force.forceX().x(d => this.xFromTime(d.time)).strength(1)).force('link', d3Force.forceLink().links(this.state.links).strength(0.5).distance(this.state.nodeRadius * 3)); // strength in [0,1]\n\n      this.force.restart().alpha(1);\n    });\n  }\n\n  startNewTangle() {\n    const nodeRadius = getNodeRadius(this.state.nodeCount); // TODO Add handling for alpha plot, ml plot\n\n    const tangleInfo = {\n      nodeCount: this.state.nodeCount,\n      lambda: this.state.lambda,\n      alpha: this.state.alpha,\n      tipSelectionAlgorithm: this.state.tipSelectionAlgorithm\n    }; // const tangleInfo = {\n    //   nodeCount: this.state.nodeCount,\n    //   lambda: this.state.lambda,\n    //   alpha: this.state.alpha,\n    //   tipSelectionAlgorithm: tipSelectionDictionary[this.state.tipSelectionAlgorithm].algo,\n    // }\n    //\n    // const tangle = generateTangle(tangleInfo)\n    // Make synchronous api call to python server to generate tangle\n\n    var res = request('POST', 'http://localhost:5000/createTangle', {\n      json: JSON.stringify(tangleInfo)\n    });\n    const temp = JSON.parse(res.getBody('utf8'));\n    const tangle = cleanupData(temp);\n    const {\n      width,\n      height\n    } = this.state;\n\n    for (let node of tangle.nodes) {\n      node.y = height / 4 + myrng() * (height / 2), node.x = width / 2; // required to avoid annoying errors\n    }\n\n    this.force.stop();\n    this.setState({\n      nodes: tangle.nodes,\n      links: tangle.links,\n      nodeRadius\n    }, () => {\n      // Set all nodes' x by time value after state has been set\n      this.recalculateFixedPositions();\n    });\n    this.force.restart().alpha(1);\n  }\n\n  recalculateFixedPositions() {\n    // Set genesis's y to center\n    const genesisNode = this.state.nodes[0];\n    genesisNode.fx = this.setState.height / 2;\n\n    for (let node of this.state.nodes) {\n      node.fx = this.xFromTime(node.time);\n    }\n  }\n\n  xFromTime(time) {\n    const padding = this.state.nodeRadius; // Avoid edge cases with 0 or 1 nodes\n\n    if (this.state.nodes.length < 2) {\n      return padding;\n    }\n\n    const maxTime = this.state.nodes[this.state.nodes.length - 1].time; // Rescale nodes' x to cover [margin, width-margin]\n\n    const scale = scaleLinear().domain([0, maxTime]);\n    scale.range([padding, this.state.width - padding]);\n    return scale(time);\n  }\n\n  mouseEntersNodeHandler(e) {\n    const name = e.target.getAttribute('name');\n    this.setState({\n      hoveredNode: this.state.nodes.find(node => node.name === name)\n    });\n  }\n\n  mouseLeavesNodeHandler(e) {\n    this.setState({\n      hoveredNode: undefined\n    });\n  }\n\n  getApprovedNodes(root) {\n    if (!root) {\n      return {\n        nodes: new Set(),\n        links: new Set()\n      };\n    }\n\n    return getDescendants({\n      nodes: this.state.nodes,\n      links: this.state.links,\n      root\n    });\n  }\n\n  getApprovingNodes(root) {\n    if (!root) {\n      return {\n        nodes: new Set(),\n        links: new Set()\n      };\n    }\n\n    return getAncestors({\n      nodes: this.state.nodes,\n      links: this.state.links,\n      root\n    });\n  } // TODO Add others?\n\n\n  handleTipSelectionRadio(event) {\n    this.setState({\n      tipSelectionAlgorithm: event.target.value\n    }, () => {\n      this.startNewTangle();\n    });\n  }\n\n  render() {\n    const {\n      nodeCount,\n      lambda,\n      alpha,\n      width,\n      height\n    } = this.state;\n    const approved = this.getApprovedNodes(this.state.hoveredNode);\n    const approving = this.getApprovingNodes(this.state.hoveredNode);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-bar-container\",\n        style: {\n          width\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left-cell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right-cell\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top-bar-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-title\",\n            children: \"Number of transactions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-container\",\n            children: /*#__PURE__*/_jsxDEV(SliderContainer, {\n              min: nodeCountMin,\n              max: nodeCountMax,\n              defaultValue: nodeCountDefault,\n              value: nodeCount,\n              step: 1,\n              marks: {\n                [nodeCountMin]: `${nodeCountMin}`,\n                [nodeCountMax]: `${nodeCountMax}`\n              },\n              handle: sliderHandle,\n              onChange: nodeCount => {\n                this.setState(Object.assign(this.state, {\n                  nodeCount\n                }));\n                this.startNewTangle();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tip-algo-label\",\n            children: /*#__PURE__*/_jsxDEV(TipAlgorithmLabel, {\n              algoKey: \"URTS\",\n              selectedAlgorithm: this.state.tipSelectionAlgorithm,\n              onChange: this.handleTipSelectionRadio.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top-bar-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-title\",\n            children: \"Transaction rate (\\u03BB)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-container\",\n            children: /*#__PURE__*/_jsxDEV(SliderContainer, {\n              min: lambdaMin,\n              max: lambdaMax,\n              step: 0.25,\n              defaultValue: lambdaDefault,\n              value: lambda,\n              marks: {\n                [lambdaMin]: `${lambdaMin}`,\n                [lambdaMax]: `${lambdaMax}`\n              },\n              handle: sliderHandle,\n              onChange: lambda => {\n                this.setState(Object.assign(this.state, {\n                  lambda\n                }));\n                this.startNewTangle();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tip-algo-label\",\n            children: /*#__PURE__*/_jsxDEV(TipAlgorithmLabel, {\n              algoKey: \"UWRW\",\n              selectedAlgorithm: this.state.tipSelectionAlgorithm,\n              onChange: this.handleTipSelectionRadio.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top-bar-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-title\",\n            children: \"alpha\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slider-container\",\n            children: /*#__PURE__*/_jsxDEV(SliderContainer, {\n              min: alphaMin,\n              max: alphaMax,\n              step: 0.01,\n              defaultValue: alphaDefault,\n              value: alpha,\n              marks: {\n                [alphaMin]: `${alphaMin}`,\n                [alphaMax]: `${alphaMax}`\n              },\n              handle: sliderHandle,\n              disabled: this.state.tipSelectionAlgorithm !== 'WRW' && this.state.tipSelectionAlgorithm !== 'AML',\n              onChange: alpha => {\n                this.setState(Object.assign(this.state, {\n                  alpha\n                }));\n                this.startNewTangle();\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tip-algo-label\",\n            children: /*#__PURE__*/_jsxDEV(TipAlgorithmLabel, {\n              algoKey: \"WRW\",\n              selectedAlgorithm: this.state.tipSelectionAlgorithm,\n              onChange: this.handleTipSelectionRadio.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top-bar-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tip-algo-label\",\n            children: /*#__PURE__*/_jsxDEV(TipAlgorithmLabel, {\n              algoKey: \"EIOTA\",\n              selectedAlgorithm: this.state.tipSelectionAlgorithm,\n              onChange: this.handleTipSelectionRadio.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top-bar-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 414,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tip-algo-label\",\n            children: /*#__PURE__*/_jsxDEV(TipAlgorithmLabel, {\n              algoKey: \"AML\",\n              selectedAlgorithm: this.state.tipSelectionAlgorithm,\n              onChange: this.handleTipSelectionRadio.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top-bar-row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tip-algo-label\",\n            children: /*#__PURE__*/_jsxDEV(TipAlgorithmLabel, {\n              algoKey: \"almostURTS\",\n              selectedAlgorithm: this.state.tipSelectionAlgorithm,\n              onChange: this.handleTipSelectionRadio.bind(this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tangle, {\n        links: this.state.links,\n        nodes: this.state.nodes,\n        nodeCount: 6,\n        width: width,\n        height: height,\n        leftMargin: leftMargin,\n        rightMargin: rightMargin,\n        nodeRadius: this.state.nodeRadius,\n        mouseEntersNodeHandler: this.mouseEntersNodeHandler.bind(this),\n        mouseLeavesNodeHandler: this.mouseLeavesNodeHandler.bind(this),\n        approvedNodes: approved.nodes,\n        approvedLinks: approved.links,\n        approvingNodes: approving.nodes,\n        approvingLinks: approving.links,\n        hoveredNode: this.state.hoveredNode,\n        tips: getTips({\n          nodes: this.state.nodes,\n          links: this.state.links\n        }),\n        showLabels: this.state.nodeRadius > showLabelsMinimumRadius ? true : false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst TangleContainerConnected = connect(mapStateToProps, mapDispatchToProps)(TangleContainer);\nexport default TangleContainerConnected;\n\nvar _c;\n\n$RefreshReg$(_c, \"TipAlgorithmLabel\");","map":{"version":3,"sources":["/home/crawlins/IdeaProjects/IOTAVis/reactClient/src/containers/TangleContainer.js"],"names":["React","PropTypes","Tangle","connect","d3Force","scaleLinear","generateTangle","Slider","Tooltip","getAncestors","getDescendants","getTips","uniformRandom","unWeightedMCMC","weightedMCMC","adaptiveML","SliderContainer","seedrandom","myrng","request","require","mapStateToProps","state","ownProps","mapDispatchToProps","dispatch","nodeRadiusMax","nodeRadiusMin","showLabelsMinimumRadius","getNodeRadius","nodeCount","smallNodeCount","largeNodeCount","scale","domain","range","tipSelectionDictionary","algo","label","leftMargin","rightMargin","bottomMargin","nodeCountMin","nodeCountMax","nodeCountDefault","lambdaMin","lambdaMax","lambdaDefault","alphaMin","alphaMax","alphaDefault","Handle","sliderHandle","props","value","dragging","index","restProps","propTypes","number","isRequired","bool","TipAlgorithmLabel","selectedAlgorithm","onChange","algoKey","fontSize","string","any","cleanupData","tangleData","node","nodes","link","links","target","name","source","TangleContainer","Component","constructor","lambda","alpha","width","height","nodeRadius","tipSelectionAlgorithm","updateWindowDimensions","bind","force","forceSimulation","alphaDecay","on","y","Math","max","min","setState","componentWillUnmount","stop","window","removeEventListener","componentDidMount","startNewTangle","addEventListener","innerWidth","innerHeight","recalculateFixedPositions","forceCollide","radius","strength","iterations","forceY","d","forceX","x","xFromTime","time","forceLink","distance","restart","tangleInfo","res","json","JSON","stringify","temp","parse","getBody","tangle","genesisNode","fx","padding","length","maxTime","mouseEntersNodeHandler","e","getAttribute","hoveredNode","find","mouseLeavesNodeHandler","undefined","getApprovedNodes","root","Set","getApprovingNodes","handleTipSelectionRadio","event","render","approved","approving","Object","assign","TangleContainerConnected"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tangle from '../components/Tangle';\nimport {connect} from 'react-redux';\nimport * as d3Force from 'd3-force';\nimport {scaleLinear} from 'd3-scale';\nimport {generateTangle} from '../shared/generateData';\nimport Slider from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-slider/assets/index.css';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport {getAncestors, getDescendants, getTips} from '../shared/algorithms';\nimport './radio-button.css';\nimport {uniformRandom, unWeightedMCMC, weightedMCMC, adaptiveML} from '../shared/tip-selection';\nimport '../components/Tangle.css';\nimport SliderContainer from './SliderContainer';\nimport seedrandom from 'seedrandom';\nvar myrng = new seedrandom('hello.');\n\nvar request = require('sync-request')\n\nconst mapStateToProps = (state, ownProps) => ({});\nconst mapDispatchToProps = (dispatch, ownProps) => ({});\n\nconst nodeRadiusMax = 25;\nconst nodeRadiusMin = 13;\nconst showLabelsMinimumRadius = 21;\nconst getNodeRadius = nodeCount => {\n  const smallNodeCount = 20;\n  const largeNodeCount = 100;\n\n  if (nodeCount < smallNodeCount) {\n    return nodeRadiusMax;\n  }\n  if (nodeCount > largeNodeCount) {\n    return nodeRadiusMin;\n  }\n  const scale = scaleLinear().domain([smallNodeCount, largeNodeCount]);\n  scale.range([nodeRadiusMax, nodeRadiusMin]);\n\n  return scale(nodeCount);\n};\n\nconst tipSelectionDictionary = {\n  'URTS': {\n    algo: uniformRandom,\n    label: 'Uniform Random',\n  },\n  'UWRW': {\n    algo: unWeightedMCMC,\n    label: 'Unweighted Random Walk',\n  },\n  'WRW': {\n    algo: weightedMCMC,\n    label: 'Weighted Random Walk',\n  },\n\n  'EIOTA':{\n    algo: '', // Algo in Python server\n    label:  'E-IOTA (Best Param.)',\n  },\n  'AML':{\n    algo:adaptiveML,\n    label: 'Adaptive Machine Learning (WIP)'\n  },\n  'almostURTS':{\n    algo: '',// Algo in Python server\n    label: 'Almost URTS',\n  }\n  // TODO E-IOTA and others\n};\n\nconst leftMargin = 10;\nconst rightMargin = 10;\nconst bottomMargin = 190;\n\nconst nodeCountMin = 1;\nconst nodeCountMax = 500;\nconst nodeCountDefault = 100;\nconst lambdaMin = 0.1;\nconst lambdaMax = 50;\nconst lambdaDefault = 10;\nconst alphaMin = 0;\nconst alphaMax = 5;\nconst alphaDefault = 0.5;\n\nconst Handle = Slider.Handle;\nconst sliderHandle = props => {\n  const {value, dragging, index, ...restProps} = props;\n  return (\n    <Tooltip\n      prefixCls='rc-slider-tooltip'\n      overlay={value}\n      visible={dragging}\n      placement='top'\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nsliderHandle.propTypes = {\n  value: PropTypes.number.isRequired,\n  dragging: PropTypes.bool.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nconst TipAlgorithmLabel = ({selectedAlgorithm, onChange, algoKey}) =>\n  <label className='container' key={algoKey}>\n    <div style={{fontSize: 10}}>\n      {tipSelectionDictionary[algoKey].label}\n    </div>\n    <input type='radio' name='radio' value={algoKey}\n      checked={selectedAlgorithm === algoKey}\n      onChange={onChange}\n    />\n    <span className='checkmark'></span>\n  </label>;\n\nTipAlgorithmLabel.propTypes = {\n  selectedAlgorithm: PropTypes.string.isRequired,\n  onChange: PropTypes.any,\n  algoKey: PropTypes.string.isRequired,\n};\n\nfunction cleanupData(tangleData){\n\n  for (let node of tangleData.nodes) {\n    for (let link of tangleData.links){\n      if (link.target.name == node.name){\n        link.target = node\n      }\n      if (link.source.name == node.name){\n        link.source = node\n      }\n    }\n  }\n\n  return tangleData\n}\n\n\nclass TangleContainer extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      nodes: [],\n      links: [],\n      nodeCount: nodeCountDefault,\n      lambda: lambdaDefault,\n      alpha: alphaDefault,\n      width: 300, // default values\n      height: 300,\n      nodeRadius: getNodeRadius(nodeCountDefault),\n      tipSelectionAlgorithm: 'URTS',\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\n    this.force = d3Force.forceSimulation();\n    this.force.alphaDecay(0.1);\n\n    this.force.on('tick', () => {\n      this.force.nodes(this.state.nodes);\n\n      // restrict nodes to window area\n      for (let node of this.state.nodes) {\n        // Fixed transactions in time label with 5*\n        node.y = Math.max(this.state.nodeRadius, Math.min(this.state.height - 5 * this.state.nodeRadius, node.y));\n      }\n\n      this.setState({\n        links: this.state.links,\n        nodes: this.state.nodes,\n      });\n    });\n  }\n  componentWillUnmount() {\n    this.force.stop();\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n  componentDidMount() {\n    this.startNewTangle();\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth - leftMargin - rightMargin,\n      height: window.innerWidth < 768 ? window.innerHeight : window.innerHeight - bottomMargin,\n    }, () => {\n      this.recalculateFixedPositions();\n      this.force\n        .force('no_collision', d3Force.forceCollide().radius(this.state.nodeRadius * 2).strength(0.01).iterations(15))\n        .force('pin_y_to_center', d3Force.forceY().y(d => this.state.height / 2).strength(0.1))\n        .force('pin_x_to_time', d3Force.forceX().x(d => this.xFromTime(d.time)).strength(1))\n        .force('link', d3Force.forceLink().links(this.state.links).strength(0.5).distance(this.state.nodeRadius*3)); // strength in [0,1]\n\n      this.force.restart().alpha(1);\n    });\n  }\n\n  startNewTangle() {\n    const nodeRadius = getNodeRadius(this.state.nodeCount);\n\n    // TODO Add handling for alpha plot, ml plot\n    const tangleInfo = {\n      nodeCount: this.state.nodeCount,\n      lambda: this.state.lambda,\n      alpha: this.state.alpha,\n      tipSelectionAlgorithm: this.state.tipSelectionAlgorithm,\n    }\n\n    // const tangleInfo = {\n    //   nodeCount: this.state.nodeCount,\n    //   lambda: this.state.lambda,\n    //   alpha: this.state.alpha,\n    //   tipSelectionAlgorithm: tipSelectionDictionary[this.state.tipSelectionAlgorithm].algo,\n    // }\n    //\n    // const tangle = generateTangle(tangleInfo)\n\n    // Make synchronous api call to python server to generate tangle\n    var res = request('POST','http://localhost:5000/createTangle',{json:JSON.stringify(tangleInfo)});\n    const temp = JSON.parse(res.getBody('utf8'))\n    const tangle = cleanupData(temp)\n\n    const {width, height} = this.state;\n\n    for (let node of tangle.nodes) {\n      node.y = height/4 + myrng()*(height/2),\n      node.x = width/2; // required to avoid annoying errors\n    }\n\n    this.force.stop();\n\n    this.setState({\n      nodes: tangle.nodes,\n      links: tangle.links,\n      nodeRadius,\n    }, () => {\n      // Set all nodes' x by time value after state has been set\n      this.recalculateFixedPositions();\n    });\n\n    this.force.restart().alpha(1);\n  }\n  recalculateFixedPositions() {\n    // Set genesis's y to center\n    const genesisNode = this.state.nodes[0];\n    genesisNode.fx = this.setState.height / 2;\n\n    for (let node of this.state.nodes) {\n      node.fx = this.xFromTime(node.time);\n    }\n  }\n  xFromTime(time) {\n    const padding = this.state.nodeRadius;\n    // Avoid edge cases with 0 or 1 nodes\n    if (this.state.nodes.length < 2) {\n      return padding;\n    }\n\n    const maxTime = this.state.nodes[this.state.nodes.length-1].time;\n\n    // Rescale nodes' x to cover [margin, width-margin]\n    const scale = scaleLinear().domain([0, maxTime]);\n    scale.range([padding, this.state.width - padding]);\n\n    return scale(time);\n  }\n  mouseEntersNodeHandler(e) {\n    const name = e.target.getAttribute('name');\n    this.setState({\n      hoveredNode: this.state.nodes.find(node => node.name === name),\n    });\n  }\n  mouseLeavesNodeHandler(e) {\n    this.setState({\n      hoveredNode: undefined,\n    });\n  }\n  getApprovedNodes(root) {\n    if (!root) {\n      return {nodes: new Set(), links: new Set()};\n    }\n\n    return getDescendants({\n      nodes: this.state.nodes,\n      links: this.state.links,\n      root,\n    });\n  }\n  getApprovingNodes(root) {\n    if (!root) {\n      return {nodes: new Set(), links: new Set()};\n    }\n\n    return getAncestors({\n      nodes: this.state.nodes,\n      links: this.state.links,\n      root,\n    });\n  }\n  // TODO Add others?\n  handleTipSelectionRadio(event) {\n    this.setState({\n      tipSelectionAlgorithm: event.target.value,\n    }, () => {\n      this.startNewTangle();\n    });\n  }\n  render() {\n    const {nodeCount,lambda,alpha, width, height} = this.state;\n    const approved = this.getApprovedNodes(this.state.hoveredNode);\n    const approving = this.getApprovingNodes(this.state.hoveredNode);\n\n    return (\n      <div>\n        <div className='top-bar-container' style={{width}}>\n          <div className='left-cell'></div>\n          <div className='right-cell'></div>\n          <div className='top-bar-row'>\n            <div className='slider-title'>Number of transactions</div>\n            <div className='slider-container'>\n              <SliderContainer\n                min={nodeCountMin}\n                max={nodeCountMax}\n                defaultValue={nodeCountDefault}\n                value={nodeCount}\n                step={1}\n                marks={{[nodeCountMin]: `${nodeCountMin}`, [nodeCountMax]: `${nodeCountMax}`}}\n                handle={sliderHandle}\n                onChange={nodeCount => {\n                  this.setState(Object.assign(this.state, {nodeCount}));\n                  this.startNewTangle();\n                }} />\n            </div>\n            <div className='tip-algo-label'>\n              <TipAlgorithmLabel\n                algoKey='URTS'\n                selectedAlgorithm={this.state.tipSelectionAlgorithm}\n                onChange={this.handleTipSelectionRadio.bind(this)} />\n            </div>\n          </div>\n          <div className='top-bar-row'>\n            <div className='slider-title'>Transaction rate (λ)</div>\n            <div className='slider-container'>\n              <SliderContainer\n                min={lambdaMin}\n                max={lambdaMax}\n                step={0.25}\n                defaultValue={lambdaDefault}\n                value={lambda}\n                marks={{[lambdaMin]: `${lambdaMin}`, [lambdaMax]: `${lambdaMax}`}}\n                handle={sliderHandle}\n                onChange={lambda => {\n                  this.setState(Object.assign(this.state, {lambda}));\n                  this.startNewTangle();\n                }} />\n            </div>\n            <div className='tip-algo-label'>\n              <TipAlgorithmLabel\n                algoKey='UWRW'\n                selectedAlgorithm={this.state.tipSelectionAlgorithm}\n                onChange={this.handleTipSelectionRadio.bind(this)} />\n            </div>\n          </div>\n          <div className='top-bar-row'>\n            <div className='slider-title'>alpha</div>\n            <div className='slider-container'>\n              <SliderContainer\n                min={alphaMin}\n                max={alphaMax}\n                step={0.01}\n                defaultValue={alphaDefault}\n                value={alpha}\n                marks={{[alphaMin]: `${alphaMin}`, [alphaMax]: `${alphaMax}`}}\n                handle={sliderHandle}\n                disabled={(this.state.tipSelectionAlgorithm !== 'WRW') && (this.state.tipSelectionAlgorithm !== 'AML')}\n                onChange={alpha => {\n                  this.setState(Object.assign(this.state, {alpha}));\n                  this.startNewTangle();\n                }} />\n            </div>\n            <div className='tip-algo-label'>\n              <TipAlgorithmLabel\n                algoKey='WRW'\n                selectedAlgorithm={this.state.tipSelectionAlgorithm}\n                onChange={this.handleTipSelectionRadio.bind(this)} />\n            </div>\n\n          </div>\n          <div className='top-bar-row'>\n            {/*Empty divs for additional algorithms*/}\n            <div>\n            </div>\n            <div>\n            </div>\n            <div className='tip-algo-label'>\n              <TipAlgorithmLabel\n                  algoKey='EIOTA'\n                  selectedAlgorithm={this.state.tipSelectionAlgorithm}\n                  onChange={this.handleTipSelectionRadio.bind(this)} />\n            </div>\n          </div>\n          <div className='top-bar-row'>\n\n            {/*Empty divs for additional ml algorithms*/}\n            <div>\n            </div>\n            <div>\n            </div>\n            <div className='tip-algo-label'>\n              <TipAlgorithmLabel\n                  algoKey='AML'\n                  selectedAlgorithm={this.state.tipSelectionAlgorithm}\n                  onChange={this.handleTipSelectionRadio.bind(this)} />\n            </div>\n          </div>\n          <div className='top-bar-row'>\n\n            {/*Empty divs for additional ml algorithms*/}\n            <div>\n            </div>\n            <div>\n            </div>\n            <div className='tip-algo-label'>\n              <TipAlgorithmLabel\n                  algoKey='almostURTS'\n                  selectedAlgorithm={this.state.tipSelectionAlgorithm}\n                  onChange={this.handleTipSelectionRadio.bind(this)} />\n            </div>\n          </div>\n        </div>\n        <Tangle links={this.state.links} nodes={this.state.nodes}\n          nodeCount={6}\n          width={width}\n          height={height}\n          leftMargin={leftMargin}\n          rightMargin={rightMargin}\n          nodeRadius={this.state.nodeRadius}\n          mouseEntersNodeHandler={this.mouseEntersNodeHandler.bind(this)}\n          mouseLeavesNodeHandler={this.mouseLeavesNodeHandler.bind(this)}\n          approvedNodes={approved.nodes}\n          approvedLinks={approved.links}\n          approvingNodes={approving.nodes}\n          approvingLinks={approving.links}\n          hoveredNode={this.state.hoveredNode}\n          tips={getTips({\n            nodes: this.state.nodes,\n            links: this.state.links,\n          })}\n          showLabels={this.state.nodeRadius > showLabelsMinimumRadius ? true : false}\n        />\n      </div>\n    );\n  }\n}\n\nconst TangleContainerConnected = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TangleContainer);\n\nexport default TangleContainerConnected;\n"]},"metadata":{},"sourceType":"module"}