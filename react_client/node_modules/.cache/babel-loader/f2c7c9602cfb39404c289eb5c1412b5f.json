{"ast":null,"code":"import { choose, isTip, randomWalk, weightedRandomWalk, calculateWeights, adaptiveMachineLearning } from './algorithms';\nexport const uniformRandom = ({\n  nodes,\n  links\n}) => {\n  const candidates = nodes.filter(node => isTip({\n    links,\n    node\n  }));\n  return candidates.length === 0 ? [] : [choose(candidates), choose(candidates)];\n};\nexport const unWeightedMCMC = ({\n  nodes,\n  links\n}) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  const start = nodes[0]; // Start in genesis\n\n  return [randomWalk({\n    links,\n    start\n  }), randomWalk({\n    links,\n    start\n  })];\n};\nexport const weightedMCMC = ({\n  nodes,\n  links,\n  alpha\n}) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  const start = nodes[0]; // Start in genesis\n\n  calculateWeights({\n    nodes,\n    links\n  });\n  return [weightedRandomWalk({\n    links,\n    start,\n    alpha\n  }), weightedRandomWalk({\n    links,\n    start,\n    alpha\n  })];\n};\nexport const adaptiveML = ({\n  nodes,\n  links\n}) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  const start = nodes[0]; // Start in genesis\n\n  calculateWeights({\n    nodes,\n    links\n  });\n  return [adaptiveMachineLearning({\n    links,\n    start\n  }), adaptiveMachineLearning({\n    links,\n    start\n  })];\n};","map":{"version":3,"sources":["/home/crawlins/IdeaProjects/IOTAVis/reactClient/src/shared/tip-selection.js"],"names":["choose","isTip","randomWalk","weightedRandomWalk","calculateWeights","adaptiveMachineLearning","uniformRandom","nodes","links","candidates","filter","node","length","unWeightedMCMC","start","weightedMCMC","alpha","adaptiveML"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,KAAhB,EAAuBC,UAAvB,EAAmCC,kBAAnC,EAAuDC,gBAAvD,EAAyEC,uBAAzE,QAAuG,cAAvG;AAEA,OAAO,MAAMC,aAAa,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAAoB;AAC/C,QAAMC,UAAU,GAAGF,KAAK,CAACG,MAAN,CAAaC,IAAI,IAAIV,KAAK,CAAC;AAACO,IAAAA,KAAD;AAAQG,IAAAA;AAAR,GAAD,CAA1B,CAAnB;AAEA,SAAOF,UAAU,CAACG,MAAX,KAAsB,CAAtB,GAA0B,EAA1B,GAA+B,CAACZ,MAAM,CAACS,UAAD,CAAP,EAAqBT,MAAM,CAACS,UAAD,CAA3B,CAAtC;AACD,CAJM;AAMP,OAAO,MAAMI,cAAc,GAAG,CAAC;AAACN,EAAAA,KAAD;AAAQC,EAAAA;AAAR,CAAD,KAAoB;AAChD,MAAID,KAAK,CAACK,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,EAAP;AACD;;AAED,QAAME,KAAK,GAAGP,KAAK,CAAC,CAAD,CAAnB,CALgD,CAKxB;;AAExB,SAAO,CACLL,UAAU,CAAC;AAACM,IAAAA,KAAD;AAAQM,IAAAA;AAAR,GAAD,CADL,EAELZ,UAAU,CAAC;AAACM,IAAAA,KAAD;AAAQM,IAAAA;AAAR,GAAD,CAFL,CAAP;AAID,CAXM;AAaP,OAAO,MAAMC,YAAY,GAAG,CAAC;AAACR,EAAAA,KAAD;AAAQC,EAAAA,KAAR;AAAeQ,EAAAA;AAAf,CAAD,KAA2B;AACrD,MAAIT,KAAK,CAACK,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,EAAP;AACD;;AAED,QAAME,KAAK,GAAGP,KAAK,CAAC,CAAD,CAAnB,CALqD,CAK7B;;AAExBH,EAAAA,gBAAgB,CAAC;AAACG,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,CAAhB;AAEA,SAAO,CACLL,kBAAkB,CAAC;AAACK,IAAAA,KAAD;AAAQM,IAAAA,KAAR;AAAeE,IAAAA;AAAf,GAAD,CADb,EAELb,kBAAkB,CAAC;AAACK,IAAAA,KAAD;AAAQM,IAAAA,KAAR;AAAeE,IAAAA;AAAf,GAAD,CAFb,CAAP;AAID,CAbM;AAeP,OAAO,MAAMC,UAAU,GAAG,CAAC;AAACV,EAAAA,KAAD;AAAOC,EAAAA;AAAP,CAAD,KAAmB;AAE3C,MAAID,KAAK,CAACK,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAO,EAAP;AACD;;AAED,QAAME,KAAK,GAAGP,KAAK,CAAC,CAAD,CAAnB,CAN2C,CAMnB;;AAExBH,EAAAA,gBAAgB,CAAC;AAACG,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,CAAhB;AAEA,SAAO,CACLH,uBAAuB,CAAC;AAACG,IAAAA,KAAD;AAAQM,IAAAA;AAAR,GAAD,CADlB,EAELT,uBAAuB,CAAC;AAACG,IAAAA,KAAD;AAAQM,IAAAA;AAAR,GAAD,CAFlB,CAAP;AAKD,CAfM","sourcesContent":["import {choose, isTip, randomWalk, weightedRandomWalk, calculateWeights, adaptiveMachineLearning} from './algorithms';\n\nexport const uniformRandom = ({nodes, links}) => {\n  const candidates = nodes.filter(node => isTip({links, node}));\n\n  return candidates.length === 0 ? [] : [choose(candidates), choose(candidates)];\n};\n\nexport const unWeightedMCMC = ({nodes, links}) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  const start = nodes[0]; // Start in genesis\n\n  return [\n    randomWalk({links, start}),\n    randomWalk({links, start}),\n  ];\n};\n\nexport const weightedMCMC = ({nodes, links, alpha}) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  const start = nodes[0]; // Start in genesis\n\n  calculateWeights({nodes, links});\n\n  return [\n    weightedRandomWalk({links, start, alpha}),\n    weightedRandomWalk({links, start, alpha}),\n  ];\n};\n\nexport const adaptiveML = ({nodes,links}) => {\n\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  const start = nodes[0]; // Start in genesis\n\n  calculateWeights({nodes, links});\n\n  return [\n    adaptiveMachineLearning({links, start}),\n    adaptiveMachineLearning({links, start}),\n  ];\n\n};\n"]},"metadata":{},"sourceType":"module"}