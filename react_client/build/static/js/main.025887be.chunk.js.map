{"version":3,"sources":["reducer.js","components/Tangle.js","shared/generateData.js","shared/algorithms.js","containers/SliderContainer.js","containers/TangleContainer.js","shared/tip-selection.js","index.js"],"names":["appReducer","combineReducers","tangle","state","Axis","x","endX","y","startVal","endVal","ticks","xScale","d3Scale","domain","range","tickValues","fill","className","stroke","strokeWidth","x1","x2","y1","y2","map","value","fontSize","Marker","color","id","nodeRadius","viewBox","refX","refY","markerWidth","markerHeight","markerUnits","orient","d","Node","mouseEntersNodeHandler","mouseLeavesNodeHandler","name","width","height","rx","ry","onMouseEnter","onMouseLeave","generateLinkPath","link","arrowheadSpace","pathVector","target","source","radius","Math","sqrt","pow","scalingFactor","arrowX","arrowY","Tangle","props","links","approvedLinks","has","approvingLinks","markerEnd","nodes","node","transform","approvedNodes","approvingNodes","tips","hoveredNode","style","opacity","showLabels","fontFamily","alignmentBaseline","textAnchor","pointerEvents","leftMargin","rightMargin","length","max","n","time","jStat","require","isTip","some","choose","arr","floor","random","getTips","filter","Set","getApprovers","randomWalk","particle","start","approvers","weightedChoose","weights","sum","reduce","w","rand","cumSum","i","weightedRandomWalk","alpha","cumWeights","cumWeight","maxWeight","exp","adaptiveMachineLearning","newAlpha","axios","get","then","res","data","console","log","getChildrenLists","childrenLists","lists","Object","assign","push","calculateWeights","sorted","unvisited","result","visit","delete","size","values","next","reverse","topologicalSort","ancestorSets","child","SliderContainer","display","min","position","top","onWheel","e","preventDefault","valueToAdd","deltaY","step","valueToEmit","onChange","defaultValue","marks","handle","disabled","trackStyle","visibility","railStyle","borderRadius","backgroundColor","handleStyle","borderWidth","marginTop","getNodeRadius","nodeCount","scale","scaleLinear","tipSelectionDictionary","algo","candidates","label","Handle","Slider","sliderHandle","dragging","index","restProps","prefixCls","overlay","visible","placement","TipAlgorithmLabel","selectedAlgorithm","algoKey","type","checked","TangleContainer","lambda","tipSelectionAlgorithm","updateWindowDimensions","bind","force","d3Force","alphaDecay","on","setState","this","stop","window","removeEventListener","startNewTangle","addEventListener","innerWidth","innerHeight","recalculateFixedPositions","strength","iterations","xFromTime","distance","restart","h","exponential","sample","candidate","candidateLinks","generateTangle","fx","padding","maxTime","getAttribute","find","undefined","root","stack","visitedNodes","visitedLinks","current","pop","outgoingEdges","l","add","getDescendants","incomingEdges","getAncestors","event","approved","getApprovedNodes","approving","getApprovingNodes","handleTipSelectionRadio","React","Component","TangleContainerConnected","connect","ownProps","dispatch","store","createStore","reducer","render","href","document","getElementById"],"mappings":"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","file":"static/js/main.025887be.chunk.js","sourcesContent":["import {combineReducers} from 'redux';\n\nconst tangleReducer = (state = {}, action) => state;\n\nconst appReducer = combineReducers({\n  tangle: tangleReducer,\n});\n\nexport default appReducer;\n","/* eslint-disable */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport * as d3Scale from 'd3-scale';\n\nconst Axis = ({x, endX, y, startVal, endVal, ticks}) => {\n  const tickSize = 5;\n\n  const xScale = d3Scale.scaleLinear().domain([startVal, endVal]);\n  xScale.range([x, endX]);\n  const tickValues = xScale.ticks(ticks);\n\n  return (\n    <g fill='none' className='unselectable axis'>\n      <text\n        x={(x+endX)/2}\n        y={y - tickSize}>\n        Time\n      </text>\n      <line\n        stroke='#000'\n        strokeWidth='1'\n        x1={x}\n        x2={endX}\n        y1={y}\n        y2={y} />\n      {tickValues.map(value =>\n        <line\n          key={value}\n          stroke='#000'\n          strokeWidth='2'\n          x1={xScale(value)}\n          y1={y}\n          x2={xScale(value)}\n          y2={y + tickSize} />\n      )}\n      {tickValues.map(value =>\n        <text\n          key={value}\n          fontSize='12'\n          x={xScale(value)}\n          y={y + 3.2 * tickSize}>\n          {value}\n        </text>\n      )}}\n    </g>\n  );\n};\n\nAxis.propTypes = {\n  x: PropTypes.number.isRequired,\n  endX: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  startVal: PropTypes.number.isRequired,\n  endVal: PropTypes.number.isRequired,\n  ticks: PropTypes.number.isRequired,\n};\n\nconst Marker = ({color, id, nodeRadius}) =>\n  <marker\n    id={id}\n    viewBox='0 -5 10 10'\n    refX={0}\n    refY={0}\n    markerWidth={10}\n    markerHeight={6}\n    fill={color}\n    markerUnits='userSpaceOnUse'\n    orient='auto' >\n    <path d='M0,-5L10,0L0,5'/>\n  </marker>;\n\nMarker.propTypes = {\n  color: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  nodeRadius: PropTypes.number.isRequired,\n};\n\nconst Node = ({nodeRadius, mouseEntersNodeHandler, mouseLeavesNodeHandler, name}) =>\n  <rect width={nodeRadius} height={nodeRadius}\n    x={-nodeRadius/2}\n    y={-nodeRadius/2}\n    rx={nodeRadius/5}\n    ry={nodeRadius/5}\n    stroke='black'\n    strokeWidth='1px'\n    fill='white'\n    name={name}\n    onMouseEnter={mouseEntersNodeHandler}\n    onMouseLeave={mouseLeavesNodeHandler} >\n  </rect>;\n\nNode.propTypes = {\n  nodeRadius: PropTypes.number.isRequired,\n  mouseEntersNodeHandler: PropTypes.any,\n  mouseLeavesNodeHandler: PropTypes.any,\n  name: PropTypes.string,\n};\n\nconst generateLinkPath = ({link, nodeRadius}) => {\n  const arrowheadSpace = nodeRadius;\n\n  const pathVector = {\n    x: link.target.x - link.source.x,\n    y: link.target.y - link.source.y,\n  };\n  const radius = Math.sqrt(Math.pow(pathVector.x, 2) + Math.pow(pathVector.y, 2));\n\n  const scalingFactor = (radius - arrowheadSpace) / radius;\n  const arrowX = link.source.x + scalingFactor * pathVector.x;\n  const arrowY = link.source.y + scalingFactor * pathVector.y;\n\n  return `M ${link.source.x} ${link.source.y} ` +\n         `L ${arrowX} ${arrowY}`;\n};\n\nconst Tangle = props =>\n  <div>\n    <svg width={props.width} height={props.height}>\n      <defs>\n        <Marker color='black' id='arrowhead' nodeRadius={props.nodeRadius} />\n        <Marker color='red' id='arrowhead-approved' nodeRadius={props.nodeRadius} />\n        <Marker color='blue' id='arrowhead-approving' nodeRadius={props.nodeRadius} />\n      </defs>\n      <g>\n        {props.links.map(link =>\n          <path className={`links${props.approvedLinks.has(link) ? ' approved' :\n                                   props.approvingLinks.has(link) ? ' approving' : ''}`}\n            key={`${link.source.name}->${link.target.name}`}\n            d={generateLinkPath({link, nodeRadius: props.nodeRadius})}\n            markerEnd={props.approvedLinks.has(link) ? 'url(#arrowhead-approved)' :\n                       props.approvingLinks.has(link) ? 'url(#arrowhead-approving)' :\n                       'url(#arrowhead)'}\n          /> )}\n      </g>\n      <g>\n        {props.nodes.map(node =>\n          <g transform={`translate(${node.x},${node.y})`} key={node.name}\n            className={\n              `${props.approvedNodes.has(node) ? 'approved' :\n                 props.approvingNodes.has(node) ? 'approving' :\n                 props.tips.has(node) ? 'tip' : ''}`}>\n            {props.hoveredNode === node &&\n              <g style={{opacity: 0.4}}>\n                <Node nodeRadius={props.nodeRadius*1.6} />\n                <Node nodeRadius={props.nodeRadius*1.3} />\n              </g>}\n            <Node\n              nodeRadius={props.nodeRadius}\n              name={node.name}\n              mouseEntersNodeHandler={props.mouseEntersNodeHandler}\n              mouseLeavesNodeHandler={props.mouseLeavesNodeHandler} />\n            {props.showLabels && <text\n              className='unselectable'\n              fill='#666' fontFamily='Helvetica'\n              alignmentBaseline='middle' textAnchor='middle'\n              pointerEvents='none'>\n              {node.name}\n            </text>}\n          </g>)}\n      </g>\n      <g>\n        <Axis\n          x={props.leftMargin}\n          endX={props.width - props.rightMargin}\n          y={props.height - 30}\n          ticks={8}\n          startVal={0}\n          endVal={props.nodes.length < 2 ? 1 : Math.max(...props.nodes.map(n => n.time))}\n          />\n      </g>\n    </svg>\n  </div>;\n\nTangle.propTypes = {\n  links: PropTypes.array.isRequired,\n  nodes: PropTypes.array.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  leftMargin: PropTypes.number.isRequired,\n  rightMargin: PropTypes.number.isRequired,\n  nodeRadius: PropTypes.number.isRequired,\n  mouseEntersNodeHandler: PropTypes.func,\n  mouseLeavesNodeHandler: PropTypes.func,\n  approvedNodes: PropTypes.any,\n  approvedLinks: PropTypes.any,\n  approvingNodes: PropTypes.any,\n  approvingLinks: PropTypes.any,\n  hoveredNode: PropTypes.any,\n};\n\nexport default Tangle;\n","const jStat = require('jStat').jStat;\n\nexport const generateTangle = ({nodeCount, lambda = 1.5, h=1, alpha=0.5, tipSelectionAlgorithm}) => {\n  jStat.exponential.sample(lambda);\n  const genesis = {\n    name: '0',\n    time: 0,\n  };\n\n  let nodes = [genesis];\n  let time = h;\n  while (nodes.length < nodeCount) {\n    const delay = jStat.exponential.sample(lambda);\n    time += delay;\n    nodes.push({\n      name: `${nodes.length}`,\n      time,\n      x: 300,\n      y: 200,\n    });\n  }\n\n  const links = [];\n  for (let node of nodes) {\n    const candidates = nodes\n      .filter(candidate => candidate.time < node.time - h);\n\n    const candidateLinks = links\n      .filter(link => link.source.time < node.time - h);\n\n    const tips = tipSelectionAlgorithm({\n      nodes: candidates,\n      links: candidateLinks,\n      alpha,\n    });\n\n    if (tips.length > 0) {\n      links.push({source: node, target: tips[0]});\n      if (tips.length > 1 && tips[0].name !== tips[1].name) {\n        links.push({source: node, target: tips[1]});\n      }\n    }\n  };\n\n  return {\n    nodes,\n    links,\n  };\n};\n","import axios from 'axios';\n\nexport const isTip = ({links, node}) => {\n  return !links.some(link => node === link.target);\n};\n\nexport const choose = arr => arr[Math.floor(Math.random() * arr.length)];\n\nexport const getDescendants = ({nodes, links, root}) => {\n  const stack = [root];\n  const visitedNodes = new Set();\n  const visitedLinks = new Set();\n\n  while (stack.length > 0) {\n    const current = stack.pop();\n\n    const outgoingEdges = links.filter(l => l.source === current);\n    for (let link of outgoingEdges) {\n      visitedLinks.add(link);\n      if (!visitedNodes.has(link.target)) {\n        stack.push(link.target);\n        visitedNodes.add(link.target);\n      }\n    }\n  }\n\n  return {nodes: visitedNodes, links: visitedLinks};\n};\n\nexport const getAncestors = ({nodes, links, root}) => {\n  const stack = [root];\n  const visitedNodes = new Set();\n  const visitedLinks = new Set();\n\n  while (stack.length > 0) {\n    const current = stack.pop();\n\n    const incomingEdges = links.filter(l => l.target === current);\n    for (let link of incomingEdges) {\n      visitedLinks.add(link);\n      if (!visitedNodes.has(link.source)) {\n        stack.push(link.source);\n        visitedNodes.add(link.source);\n      }\n    }\n  }\n\n  return {nodes: visitedNodes, links: visitedLinks};\n};\n\nexport const getTips = ({nodes, links}) => {\n  const tips = nodes.filter(node =>\n    !links.some(link => link.target === node));\n\n  return new Set(tips);\n};\n\nexport const getApprovers = ({links, node}) => {\n  return links\n    .filter(link => link.target === node)\n    .map(link => link.source);\n};\n\nexport const randomWalk = ({links, start}) => {\n  let particle = start;\n\n  while (!isTip({links, node: particle})) {\n    const approvers = getApprovers({links, node: particle});\n\n    particle = choose(approvers);\n  }\n\n  return particle;\n};\n\nconst weightedChoose = (arr, weights) => {\n  const sum = weights.reduce((sum, w) => sum + w, 0);\n  const rand = Math.random() * sum;\n\n  let cumSum = weights[0];\n  for (let i=1; i < arr.length; i++) {\n    if (rand < cumSum) {\n      return arr[i-1];\n    }\n    cumSum += weights[i];\n  }\n\n  return arr[arr.length-1];\n};\n\nexport const weightedRandomWalk = ({nodes, links, start, alpha}) => {\n  let particle = start;\n\n  while (!isTip({links, node: particle})) {\n    const approvers = getApprovers({links, node: particle});\n\n    const cumWeights = approvers.map(node => node.cumWeight);\n\n    // normalize so maximum cumWeight is 0\n    const maxWeight = Math.max(...cumWeights);\n    const normalizedWeights = cumWeights.map(w => w - maxWeight);\n\n    const weights = normalizedWeights.map(w => Math.exp(alpha * w));\n\n    particle = weightedChoose(approvers, weights);\n  }\n\n  return particle;\n};\n\nexport const adaptiveMachineLearning = ({nodes, links, start}) =>{\n  let particle = start;\n\n  // Let ML choose alpha value\n  let newAlpha = 0;\n\n  // Get alpha value from python\n  axios.get('http://localhost:5000/alpha')\n      .then(res =>{\n        newAlpha = res.data.alpha;\n        console.log(newAlpha);\n      });\n\n  while (!isTip({links, node: particle})) {\n    const approvers = getApprovers({links, node: particle});\n    const cumWeights = approvers.map(node => node.cumWeight);\n\n    // normalize so maximum cumWeight is 0\n    const maxWeight = Math.max(...cumWeights);\n    const normalizedWeights = cumWeights.map(w => w - maxWeight);\n\n    const weights = normalizedWeights.map(w => Math.exp( newAlpha* w));\n\n    particle = weightedChoose(approvers, weights);\n  }\n\n  return particle;\n\n};\n\nconst getChildrenLists = ({nodes, links}) => {\n  // Initialize an empty list for each node\n  const childrenLists = nodes.reduce((lists, node) =>\n    Object.assign(lists, {[node.name]: []}), {});\n\n  for (let link of links) {\n    childrenLists[link.source.name].push(link.target);\n  }\n\n  return childrenLists;\n};\n\n// DFS-based topological sort\nexport const topologicalSort = ({nodes, links}) => {\n  const childrenLists = getChildrenLists({nodes, links});\n  const unvisited = new Set(nodes);\n  const result = [];\n\n  const visit = node => {\n    if (!unvisited.has(node)) {\n      return;\n    }\n\n    for (let child of childrenLists[node.name]) {\n      visit(child);\n    }\n\n    unvisited.delete(node);\n    result.push(node);\n  };\n\n  while (unvisited.size > 0) {\n    const node = unvisited.values().next().value;\n\n    visit(node);\n  }\n\n  result.reverse();\n  return result;\n};\n\nexport const calculateWeights = ({nodes, links}) => {\n  const sorted = topologicalSort({nodes, links});\n\n  // Initialize an empty set for each node\n  const ancestorSets = nodes.reduce((lists, node) =>\n    Object.assign(lists, {[node.name]: new Set()}), {});\n\n  const childrenLists = getChildrenLists({nodes, links});\n  for (let node of sorted) {\n    for (let child of childrenLists[node.name]) {\n      ancestorSets[child.name] = new Set([...ancestorSets[child.name], ...ancestorSets[node.name], node]);\n    }\n\n    node.cumWeight = ancestorSets[node.name].size + 1;\n  }\n};\n","/* eslint-disable */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Slider from 'rc-slider';\n\n\nconst SliderContainer = props =>\n    <div style={{ display: 'table', width: '100%' }}>\n        <div className='left-slider-value'>\n            {props.min}\n        </div>\n        <div style={{\n            display: 'table-cell',\n            position: 'relative',\n            top: '5px',\n        }}\n            onWheel={(e) => {\n                e.preventDefault(); // Cancels the event\n                const valueToAdd = e.deltaY > 0 ? props.step : -props.step;\n                const valueToEmit = props.value + valueToAdd;\n                if (valueToEmit < props.max && valueToEmit > props.min) {\n                    props.onChange(valueToEmit);\n                }\n            }}\n        >\n            <Slider\n                min={props.min}\n                max={props.max}\n                defaultValue={props.defaultValue}\n                value={props.value}\n                step={props.step}\n                marks={{}}\n                handle={props.handle}\n                disabled={props.disabled}\n                onChange={props.onChange}\n                trackStyle={{ visibility: 'hidden' }}\n                railStyle={{\n                    borderRadius: 0,\n                    height: '1.2px',\n                    backgroundColor: 'black',\n                }}\n                handleStyle={{\n                    borderWidth: 0,\n                    backgroundColor: 'black',\n                    width: '10px',\n                    height: '10px',\n                    marginTop: '-4.5px',\n                }}\n            />\n        </div>\n        <div className='right-slider-value'>\n            {props.max}\n        </div>\n    </div>;\n\nSliderContainer.propTypes = {\n    min: PropTypes.number.isRequired,\n    max: PropTypes.number.isRequired,\n    defaultValue: PropTypes.number.isRequired,\n    step: PropTypes.number,\n    handle: PropTypes.any,\n    disabled: PropTypes.bool,\n    onChange: PropTypes.any,\n};\n\nexport default SliderContainer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tangle from '../components/Tangle';\nimport {connect} from 'react-redux';\nimport * as d3Force from 'd3-force';\nimport {scaleLinear} from 'd3-scale';\nimport {generateTangle} from '../shared/generateData';\nimport Slider from 'rc-slider';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-slider/assets/index.css';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport {getAncestors, getDescendants, getTips} from '../shared/algorithms';\nimport './radio-button.css';\nimport {uniformRandom, unWeightedMCMC, weightedMCMC, adaptiveML} from '../shared/tip-selection';\nimport '../components/Tangle.css';\nimport SliderContainer from './SliderContainer';\n\nconst mapStateToProps = (state, ownProps) => ({});\nconst mapDispatchToProps = (dispatch, ownProps) => ({});\n\nconst nodeRadiusMax = 25;\nconst nodeRadiusMin = 13;\nconst showLabelsMinimumRadius = 21;\nconst getNodeRadius = nodeCount => {\n  const smallNodeCount = 20;\n  const largeNodeCount = 100;\n\n  if (nodeCount < smallNodeCount) {\n    return nodeRadiusMax;\n  }\n  if (nodeCount > largeNodeCount) {\n    return nodeRadiusMin;\n  }\n  const scale = scaleLinear().domain([smallNodeCount, largeNodeCount]);\n  scale.range([nodeRadiusMax, nodeRadiusMin]);\n\n  return scale(nodeCount);\n};\n\nconst tipSelectionDictionary = {\n  'UR': {\n    algo: uniformRandom,\n    label: 'Uniform Random',\n  },\n  'UWRW': {\n    algo: unWeightedMCMC,\n    label: 'Unweighted Random Walk',\n  },\n  'WRW': {\n    algo: weightedMCMC,\n    label: 'Weighted Random Walk',\n  },\n  'AML':{\n    algo:adaptiveML,\n    label: 'Adaptive Machine Learning'\n  },\n};\n\nconst leftMargin = 10;\nconst rightMargin = 10;\nconst bottomMargin = 190;\n\nconst nodeCountMin = 1;\nconst nodeCountMax = 500;\nconst nodeCountDefault = 20;\nconst lambdaMin = 0.1;\nconst lambdaMax = 50;\nconst lambdaDefault = 1.5;\nconst alphaMin = 0;\nconst alphaMax = 5;\nconst alphaDefault = 0.5;\n\nconst Handle = Slider.Handle;\nconst sliderHandle = props => {\n  const {value, dragging, index, ...restProps} = props;\n  return (\n    <Tooltip\n      prefixCls='rc-slider-tooltip'\n      overlay={value}\n      visible={dragging}\n      placement='top'\n      key={index}\n    >\n      <Handle value={value} {...restProps} />\n    </Tooltip>\n  );\n};\n\nsliderHandle.propTypes = {\n  value: PropTypes.number.isRequired,\n  dragging: PropTypes.bool.isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nconst TipAlgorithmLabel = ({selectedAlgorithm, onChange, algoKey}) =>\n  <label className='container' key={algoKey}>\n    <div style={{fontSize: 10}}>\n      {tipSelectionDictionary[algoKey].label}\n    </div>\n    <input type='radio' name='radio' value={algoKey}\n      checked={selectedAlgorithm === algoKey}\n      onChange={onChange}\n    />\n    <span className='checkmark'></span>\n  </label>;\n\nTipAlgorithmLabel.propTypes = {\n  selectedAlgorithm: PropTypes.string.isRequired,\n  onChange: PropTypes.any,\n  algoKey: PropTypes.string.isRequired,\n};\n\n\nclass TangleContainer extends React.Component {\n  constructor(props) {\n    super();\n\n    this.state = {\n      nodes: [],\n      links: [],\n      nodeCount: nodeCountDefault,\n      lambda: lambdaDefault,\n      alpha: alphaDefault,\n      width: 300, // default values\n      height: 300,\n      nodeRadius: getNodeRadius(nodeCountDefault),\n      tipSelectionAlgorithm: 'UR',\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\n    this.force = d3Force.forceSimulation();\n    this.force.alphaDecay(0.1);\n\n    this.force.on('tick', () => {\n      this.force.nodes(this.state.nodes);\n\n      // restrict nodes to window area\n      for (let node of this.state.nodes) {\n        node.y = Math.max(this.state.nodeRadius, Math.min(this.state.height - 3 * this.state.nodeRadius, node.y));\n      }\n\n      this.setState({\n        links: this.state.links,\n        nodes: this.state.nodes,\n      });\n    });\n  }\n  componentWillUnmount() {\n    this.force.stop();\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n  componentDidMount() {\n    this.startNewTangle();\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n  updateWindowDimensions() {\n    this.setState({\n      width: window.innerWidth - leftMargin - rightMargin,\n      height: window.innerWidth < 768 ? window.innerHeight : window.innerHeight - bottomMargin,\n    }, () => {\n      this.recalculateFixedPositions();\n      this.force\n        .force('no_collision', d3Force.forceCollide().radius(this.state.nodeRadius * 2).strength(0.01).iterations(15))\n        .force('pin_y_to_center', d3Force.forceY().y(d => this.state.height / 2).strength(0.1))\n        .force('pin_x_to_time', d3Force.forceX().x(d => this.xFromTime(d.time)).strength(1))\n        .force('link', d3Force.forceLink().links(this.state.links).strength(0.5).distance(this.state.nodeRadius*3)); // strength in [0,1]\n\n      this.force.restart().alpha(1);\n    });\n  }\n  startNewTangle() {\n    const nodeRadius = getNodeRadius(this.state.nodeCount);\n    const tangle = generateTangle({\n      nodeCount: this.state.nodeCount,\n      lambda: this.state.lambda,\n      alpha: this.state.alpha,\n      nodeRadius,\n      tipSelectionAlgorithm: tipSelectionDictionary[this.state.tipSelectionAlgorithm].algo,\n    });\n\n    const {width, height} = this.state;\n\n    for (let node of tangle.nodes) {\n      node.y = height/4 + Math.random()*(height/2),\n      node.x = width/2; // required to avoid annoying errors\n    }\n\n    this.force.stop();\n\n    this.setState({\n      nodes: tangle.nodes,\n      links: tangle.links,\n      nodeRadius,\n    }, () => {\n      // Set all nodes' x by time value after state has been set\n      this.recalculateFixedPositions();\n    });\n\n    this.force.restart().alpha(1);\n  }\n  recalculateFixedPositions() {\n    // Set genesis's y to center\n    const genesisNode = this.state.nodes[0];\n    genesisNode.fx = this.setState.height / 2;\n\n    for (let node of this.state.nodes) {\n      node.fx = this.xFromTime(node.time);\n    }\n  }\n  xFromTime(time) {\n    const padding = this.state.nodeRadius;\n    // Avoid edge cases with 0 or 1 nodes\n    if (this.state.nodes.length < 2) {\n      return padding;\n    }\n\n    const maxTime = this.state.nodes[this.state.nodes.length-1].time;\n\n    // Rescale nodes' x to cover [margin, width-margin]\n    const scale = scaleLinear().domain([0, maxTime]);\n    scale.range([padding, this.state.width - padding]);\n\n    return scale(time);\n  }\n  mouseEntersNodeHandler(e) {\n    const name = e.target.getAttribute('name');\n    this.setState({\n      hoveredNode: this.state.nodes.find(node => node.name === name),\n    });\n  }\n  mouseLeavesNodeHandler(e) {\n    this.setState({\n      hoveredNode: undefined,\n    });\n  }\n  getApprovedNodes(root) {\n    if (!root) {\n      return {nodes: new Set(), links: new Set()};\n    }\n\n    return getDescendants({\n      nodes: this.state.nodes,\n      links: this.state.links,\n      root,\n    });\n  }\n  getApprovingNodes(root) {\n    if (!root) {\n      return {nodes: new Set(), links: new Set()};\n    }\n\n    return getAncestors({\n      nodes: this.state.nodes,\n      links: this.state.links,\n      root,\n    });\n  }\n  handleTipSelectionRadio(event) {\n    this.setState({\n      tipSelectionAlgorithm: event.target.value,\n    }, () => {\n      this.startNewTangle();\n    });\n  }\n  render() {\n    const {nodeCount,lambda,alpha, width, height} = this.state;\n    const approved = this.getApprovedNodes(this.state.hoveredNode);\n    const approving = this.getApprovingNodes(this.state.hoveredNode);\n\n    return (\n      <div>\n        <div className='top-bar-container' style={{width}}>\n          <div className='left-cell'></div>\n          <div className='right-cell'></div>\n          <div className='top-bar-row'>\n            <div className='slider-title'>Number of transactions</div>\n            <div className='slider-container'>\n              <SliderContainer\n                min={nodeCountMin}\n                max={nodeCountMax}\n                defaultValue={nodeCountDefault}\n                value={nodeCount}\n                step={1}\n                marks={{[nodeCountMin]: `${nodeCountMin}`, [nodeCountMax]: `${nodeCountMax}`}}\n                handle={sliderHandle}\n                onChange={nodeCount => {\n                  this.setState(Object.assign(this.state, {nodeCount}));\n                  this.startNewTangle();\n                }} />\n            </div>\n            <div className='tip-algo-label'>\n              <TipAlgorithmLabel\n                algoKey='UR'\n                selectedAlgorithm={this.state.tipSelectionAlgorithm}\n                onChange={this.handleTipSelectionRadio.bind(this)} />\n            </div>\n          </div>\n          <div className='top-bar-row'>\n            <div className='slider-title'>Transaction rate (λ)</div>\n            <div className='slider-container'>\n              <SliderContainer\n                min={lambdaMin}\n                max={lambdaMax}\n                step={0.2}\n                defaultValue={lambdaDefault}\n                value={lambda}\n                marks={{[lambdaMin]: `${lambdaMin}`, [lambdaMax]: `${lambdaMax}`}}\n                handle={sliderHandle}\n                onChange={lambda => {\n                  this.setState(Object.assign(this.state, {lambda}));\n                  this.startNewTangle();\n                }} />\n            </div>\n            <div className='tip-algo-label'>\n              <TipAlgorithmLabel\n                algoKey='UWRW'\n                selectedAlgorithm={this.state.tipSelectionAlgorithm}\n                onChange={this.handleTipSelectionRadio.bind(this)} />\n            </div>\n          </div>\n          <div className='top-bar-row'>\n            <div className='slider-title'>alpha</div>\n            <div className='slider-container'>\n              <SliderContainer\n                min={alphaMin}\n                max={alphaMax}\n                step={0.001}\n                defaultValue={alphaDefault}\n                value={alpha}\n                marks={{[alphaMin]: `${alphaMin}`, [alphaMax]: `${alphaMax}`}}\n                handle={sliderHandle}\n                disabled={this.state.tipSelectionAlgorithm !== 'WRW'}\n                onChange={alpha => {\n                  this.setState(Object.assign(this.state, {alpha}));\n                  this.startNewTangle();\n                }} />\n            </div>\n            <div className='tip-algo-label'>\n              <TipAlgorithmLabel\n                algoKey='WRW'\n                selectedAlgorithm={this.state.tipSelectionAlgorithm}\n                onChange={this.handleTipSelectionRadio.bind(this)} />\n            </div>\n\n          </div>\n          <div className='top-bar-row'>\n            {/*Empty divs for additional ml algorithms*/}\n            <div>\n            </div>\n            <div>\n            </div>\n            <div className='tip-algo-label'>\n              <TipAlgorithmLabel\n                  algoKey='AML'\n                  selectedAlgorithm={this.state.tipSelectionAlgorithm}\n                  onChange={this.handleTipSelectionRadio.bind(this)} />\n            </div>\n          </div>\n        </div>\n        <Tangle links={this.state.links} nodes={this.state.nodes}\n          nodeCount={6}\n          width={width}\n          height={height}\n          leftMargin={leftMargin}\n          rightMargin={rightMargin}\n          nodeRadius={this.state.nodeRadius}\n          mouseEntersNodeHandler={this.mouseEntersNodeHandler.bind(this)}\n          mouseLeavesNodeHandler={this.mouseLeavesNodeHandler.bind(this)}\n          approvedNodes={approved.nodes}\n          approvedLinks={approved.links}\n          approvingNodes={approving.nodes}\n          approvingLinks={approving.links}\n          hoveredNode={this.state.hoveredNode}\n          tips={getTips({\n            nodes: this.state.nodes,\n            links: this.state.links,\n          })}\n          showLabels={this.state.nodeRadius > showLabelsMinimumRadius ? true : false}\n        />\n      </div>\n    );\n  }\n}\n\nconst TangleContainerConnected = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TangleContainer);\n\nexport default TangleContainerConnected;\n","import {choose, isTip, randomWalk, weightedRandomWalk, calculateWeights, adaptiveMachineLearning} from './algorithms';\n\n\n// TODO Vary number of walkers?\nexport const uniformRandom = ({nodes, links}) => {\n  const candidates = nodes.filter(node => isTip({links, node}));\n\n  return candidates.length === 0 ? [] : [choose(candidates), choose(candidates)];\n};\n\nexport const unWeightedMCMC = ({nodes, links}) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  const start = nodes[0]; // Start in genesis\n\n  return [\n    randomWalk({links, start}),\n    randomWalk({links, start}),\n  ];\n};\n\nexport const weightedMCMC = ({nodes, links, alpha}) => {\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  const start = nodes[0]; // Start in genesis\n\n  calculateWeights({nodes, links});\n\n  return [\n    weightedRandomWalk({links, start, alpha}),\n    weightedRandomWalk({links, start, alpha}),\n  ];\n};\n\nexport const adaptiveML = ({nodes,links}) => {\n\n  if (nodes.length === 0) {\n    return [];\n  }\n\n  const start = nodes[0]; // Start in genesis\n\n  calculateWeights({nodes, links});\n\n  return [\n    adaptiveMachineLearning({links, start}),\n    adaptiveMachineLearning({links, start}),\n  ];\n\n};\n","import React from 'react';\nimport {render} from 'react-dom';\nimport reducer from './reducer';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport TangleContainer from './containers/TangleContainer';\n\nconst store = createStore(reducer);\n\nrender(\n  <Provider store={store}>\n    <div>\n      <div className='title-bar-container'>\n        <div className='left-title'>\n          <h2>Iota Tangle Visualization</h2>\n        </div>\n        <div className='right-title'>\n          <p>\n            This demo shows the tangle structure behind Iota, as described in\n            the <a href='https://iota.org/IOTA_Whitepaper.pdf'>white paper</a>.\n          </p>\n          <p>\n            The source code can be found on <a href='https://github.com/iotaledger/iotavisualization'>github</a>.\n          </p>\n        </div>\n      </div>\n      <TangleContainer />\n    </div>\n  </Provider>,\n  document.getElementById('container')\n);\n"],"sourceRoot":""}